// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAME_DCV_MODELS_FBS_H_
#define FLATBUFFERS_GENERATED_FRAME_DCV_MODELS_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace dcv {
namespace models {
namespace fbs {

struct Mat;
struct MatBuilder;

struct Frame;
struct FrameBuilder;

struct Mat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROWS = 4,
    VT_COLS = 6,
    VT_TYPE = 8,
    VT_DATA = 10
  };
  int32_t rows() const {
    return GetField<int32_t>(VT_ROWS, 0);
  }
  int32_t cols() const {
    return GetField<int32_t>(VT_COLS, 0);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROWS) &&
           VerifyField<int32_t>(verifier, VT_COLS) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct MatBuilder {
  typedef Mat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) {
    fbb_.AddElement<int32_t>(Mat::VT_ROWS, rows, 0);
  }
  void add_cols(int32_t cols) {
    fbb_.AddElement<int32_t>(Mat::VT_COLS, cols, 0);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(Mat::VT_TYPE, type, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Mat::VT_DATA, data);
  }
  explicit MatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Mat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mat> CreateMat(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    int32_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  MatBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_type(type);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

inline flatbuffers::Offset<Mat> CreateMatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    int32_t type = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return dcv::models::fbs::CreateMat(
      _fbb,
      rows,
      cols,
      type,
      data__);
}

struct Frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TIMESTAMP = 6,
    VT_MAT = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::String *timestamp() const {
    return GetPointer<const flatbuffers::String *>(VT_TIMESTAMP);
  }
  const dcv::models::fbs::Mat *mat() const {
    return GetPointer<const dcv::models::fbs::Mat *>(VT_MAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_TIMESTAMP) &&
           verifier.VerifyString(timestamp()) &&
           VerifyOffset(verifier, VT_MAT) &&
           verifier.VerifyTable(mat()) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  typedef Frame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Frame::VT_ID, id, 0);
  }
  void add_timestamp(flatbuffers::Offset<flatbuffers::String> timestamp) {
    fbb_.AddOffset(Frame::VT_TIMESTAMP, timestamp);
  }
  void add_mat(flatbuffers::Offset<dcv::models::fbs::Mat> mat) {
    fbb_.AddOffset(Frame::VT_MAT, mat);
  }
  explicit FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Frame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Frame>(end);
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> timestamp = 0,
    flatbuffers::Offset<dcv::models::fbs::Mat> mat = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_mat(mat);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline flatbuffers::Offset<Frame> CreateFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const char *timestamp = nullptr,
    flatbuffers::Offset<dcv::models::fbs::Mat> mat = 0) {
  auto timestamp__ = timestamp ? _fbb.CreateString(timestamp) : 0;
  return dcv::models::fbs::CreateFrame(
      _fbb,
      id,
      timestamp__,
      mat);
}

inline const dcv::models::fbs::Frame *GetFrame(const void *buf) {
  return flatbuffers::GetRoot<dcv::models::fbs::Frame>(buf);
}

inline const dcv::models::fbs::Frame *GetSizePrefixedFrame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<dcv::models::fbs::Frame>(buf);
}

inline bool VerifyFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<dcv::models::fbs::Frame>(nullptr);
}

inline bool VerifySizePrefixedFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<dcv::models::fbs::Frame>(nullptr);
}

inline void FinishFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dcv::models::fbs::Frame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dcv::models::fbs::Frame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace models
}  // namespace dcv

#endif  // FLATBUFFERS_GENERATED_FRAME_DCV_MODELS_FBS_H_
